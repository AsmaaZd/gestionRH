{% extends 'base.html.twig' %}

{% block title %}Recruteur
{% endblock %}
{% block stylesheets %}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/main.min.css" integrity="sha256-uq9PNlMzB+1h01Ij9cx7zeE2OR2pLAfRw3uUUOOPKdA=" crossorigin="anonymous">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/main.min.css" integrity="sha256-uq9PNlMzB+1h01Ij9cx7zeE2OR2pLAfRw3uUUOOPKdA=" crossorigin="anonymous">
	<!-- Datetimepicker -->
	{# <link rel="stylesheet" href="{{ asset('css/style.css') }}"> #}
<link rel="stylesheet" href="{{ asset('css/bootstrap-datetimepicker.min.css') }}"> {% endblock %}
{% block body %}
	<h2> {{ recruteur.nom }} {{ recruteur.prenom }}</h2>

{% for message in app.flashes('ajoutDispo') %}
        <div class="alert alert-success col-md-6 mx-auto text-center">
            {{message}}
        </div>
 {% endfor  %}
 {% for message in app.flashes('dateInferieureADateActuelle') %}
        <div class="alert alert-danger col-md-6 mx-auto text-center">
            {{message}}
        </div>
 {% endfor  %}
 {% for message in app.flashes('dateDejaExixtante') %}
        <div class="alert alert-warning col-md-6 mx-auto text-center">
            {{message}}
        </div>
 {% endfor  %}
	<br>

	<!-- Button trigger modal -->
	<!-- Modal -->
		<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"> <div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">Une nouvelle disponibilité</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>

				{# {{ include('calendar/_form.html.twig') }} #}

				<div class="datepickers">
					{{ form_start(form) }}
					<div
						class="modal-body">
						{# <div class="mb-3">
																																					{{ form_widget(form.title) }}
																																				</div> #}

						<div class="mb-3 ">
							<label for="date-start" class="visually-hidden">Date debut</label>
							<div class="input-group">
								<div class="input-group-text">
									<i class="fa fa-calendar"></i>
								</div>
								<div class="form-control" id="id_0"><input name="date-start" type="text" value="" class="form-control border-0" placeholder="Date debut" required/></div>
							</div>
						</div>

						<div class="mb-3 " id="dateFinDiv" style="display:none">
							<label for="date-end" class="visually-hidden">Date fin</label>
							<div class="input-group">
								<div class="input-group-text">
									<i class="fa fa-calendar"></i>
								</div>
								<div class="form-control" id="id_1"><input id="dateEnd" name="date-end" type="text" value="" class="form-control border-0" placeholder="Date fin"/></div>
							</div>
						</div>

						<div class="mb-3">
							<div class="form-check">
								{{ form_widget(form.all_day, {'attr': {'onclick':'showDateEnd();'} } ) }}
								{# {{ form_start(form, {'action': path('_demo_hello',{'name':5}),'attr': {'class': 'smart-form userform','id':'formid', 'onsubmit':'return validateForm();'} } ) }} #}
								{{ form_label(form.all_day, 'Toute la journée?', {'label_attr': {'class': 'form-check-label'}}) }}
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
						<button type="submit" class="btn btn-success">{{ button_label|default('Ajouter') }}</button>

					</div>
					{{ form_end(form) }}

				</div>

			</div>
		</div>
	</div>

	<div class="row">
		<div class="col">
			<input class="btn btn-success btn-xs" data-bs-toggle="modal" data-bs-target="#exampleModal" type="submit" value="Ajouter une disponibilité">
		</div>
		<div class="col d-flex justify-content-end">
			<div class="">
				<div class="palette row">
					<div class="color-dispo col-1">
						<span></span>
					</div>
					<p class="col text-start">Disponibilité</p>
				</div>
				<div class="palette row">
					<div class="color-entretien col-1">
						<span></span>
					</div>
					<p class="col text-start">Entretien</p>
				</div>
			</div>
		</div>
	</div>

	<div id="calendrier" class="mt-4"></div>

	{% block javascript %}
		<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/main.min.js" integrity="sha256-ekrJn2FeZaiUFq99QswpQCUTME/HxaDfX7R8INzKJGE=" crossorigin="anonymous"></script>
		<script>
			window.onload = () => {
				let calendatElement = document.querySelector("#calendrier")
				var nowDate= new Date();
				// console.log(nowDate);
				let calendar = new FullCalendar.Calendar(calendatElement, {
					eventClick: function (info) {
						var eventObj = info.event.id;

						if(info.event.extendedProps.isInterview===0){
							var eventCandidatPrenom="";
							var eventTypeMessage = "cette disponibilité?";
						}
						if(info.event.extendedProps.isInterview===1){
							var eventCandidatPrenom = info.event.extendedProps.candidatPrenom;
							var eventCandidatNom = info.event.extendedProps.candidatNom;
							var eventCandidatEmail = info.event.extendedProps.candidatEmail;
							var eventCandidatPhone = info.event.extendedProps.candidatPhone;
							// console.log(info.event.extendedProps.candidatPrenom);
							var eventCandidat = "Entretien avec "+eventCandidatNom+" "+eventCandidatPrenom+"\r\n"+"Email: "+eventCandidatEmail+"\r\n"+"Téléphone: "+eventCandidatPhone;
							var eventTypeMessage = "cet entretien?";
						}
						if (confirm(eventCandidat+"\r\n"+"Voulez-vous supprimer "+eventTypeMessage)) {
						calendar.getEventById(eventObj).remove();
						}
					},
					initialView: 'dayGridMonth',
					validRange: {
						start: nowDate,
					},
					eventOverlap: function(stillEvent, movingEvent) {
						return !stillEvent.extendedProps.isInterview && movingEvent.extendedProps.isInterview
						||
						!movingEvent.extendedProps.isInterview && !stillEvent.id;
					},
					// eventOverlap: false,
					locale: 'fr',
					timeZone: 'Europe/Paris',
					headerToolbar: {
					start: 'prev,next today',
					center: 'title',
					end: 'dayGridMonth,timeGridWeek'
					},
					buttonText: {
					today: 'Aujourd\'hui',
					month: 'Mois',
					week: 'Semaine',
					day: 'Jour',
					},
					headerToolbar: {
					start: 'prev,next today',
					center: 'title',
					end: 'dayGridMonth,timeGridWeek'
					},
					events: {{ data.data|raw }},
					editable: true,
					eventResizableFromStart: true

					})

				// calendar.on('eventChange', (e) => {
				// 	let url = `/api/calendar/${e.event.id}/edit`
				// 	let donnees = {
				// 		"id": e.event.id,
				// 		"title": e.event.title,
				// 		"oldDate": e.oldEvent.start,
				// 		"description": e.event.extendedProps.description,
				// 		"candidat": e.event.extendedProps.candidat,
				// 		"isInterview": e.event.extendedProps.isInterview,
				// 		"recruteur": e.event.extendedProps.recruteur,
				// 		"start": e.event.start,
				// 		"end": e.event.end,
				// 		"backgroundColor": e.event.backgroundColor,
				// 		"textColor": e.event.textColor,
				// 		"borderColor": e.event.borderColor,
				// 		"allDay": e.event.allDay,
				// 		"recruteur": e.event.extendedProps.recruteur,

				// 	}

				// 	// {{ data.data|raw }}.forEach(element => console.log(element));
				// 	for (let element of {{ data.data|raw }}) {
				// 		// console.log(element);
				// 		let oldDispo=e.event.start.toISOString().slice(0,10).replace(/-/g,"-");
				// 		// console.log(element.start);
				// 		if(element.start==oldDispo){
				// 			// console.log(element);
				// 			calendar.getEventById(element.id).remove();
							
				// 		}
				// 		}
					
				// 	let newDispo={
				// 		"id": e.event.id,
				// 		"isInterview": 0,
				// 		"recruteur": e.event.extendedProps.recruteur,
				// 		"start": e.oldEvent.start,
				// 		"end": e.oldEvent.start,
				// 		"allDay": 1,

				// 	}
				// 	calendar.addEvent(newDispo);
				// 	// calendar.getEventById(eventObj).remove();
				// 	// console.log(donnees)
				// 	let xhr = new XMLHttpRequest

				// 	xhr.open("PUT", url)
				// 	xhr.send(JSON.stringify(donnees))

				// })

				calendar.on('eventChange', (e) => {
					let url = `/api/calendar/${e.event.id}/edit`
					let donnees = {
					"id": e.event.id,
					"title": e.event.title,
					"oldDate": e.oldEvent.start,
					"description": e.event.extendedProps.description,
					"candidat": e.event.extendedProps.candidat,
					"isInterview": e.event.extendedProps.isInterview,
					"recruteur": e.event.extendedProps.recruteur,
					"start": e.event.start,
					"end": e.event.end,
					"backgroundColor": e.event.backgroundColor,
					"textColor": e.event.textColor,
					"borderColor": e.event.borderColor,
					"allDay": e.event.allDay,
					"recruteur": e.event.extendedProps.recruteur,
					}
						if(e.event.extendedProps.isInterview==1){
								// {{ data.data|raw }}.forEach(element => console.log(element));
								let elements = calendar.getEvents();
								// console.log(Math.floor(Math.random() * (500 - 200)) + 200);
								// console.log(elements[0].start.toISOString().slice(0,10).replace(/-/g,"-"));
								let oldDispo=e.event.start.toISOString().slice(0,10).replace(/-/g,"-");
									
								for (let element of elements) {
									// console.log(element);
									
									if(element.start.toISOString().slice(0,10).replace(/-/g,"-")==oldDispo && element.extendedProps.isInterview ===0){
										// console.log(element);
										calendar.getEventById(element.id).remove();
										
									}
									}
								
								let newDispo={
									"id": Math.floor(Math.random() * (1000 - 500)) + 500,
									"isInterview": 0,
									"recruteur": e.event.extendedProps.recruteur,
									"start": e.oldEvent.start,
									"end": e.oldEvent.start,
									"allDay": 1,

								}
								calendar.addEvent(newDispo);
								// calendar.getEventById(eventObj).remove();
								// console.log(donnees)
						}


					// console.log(donnees)
					let xhr = new XMLHttpRequest
					xhr.open("PUT", url)
					xhr.send(JSON.stringify(donnees))
					})
				calendar.on('eventRemove', (e) => { // console.log(e)
					let url = `/api/calendar/${e.event.id}/delete`
					let donnees = {
						"oldDate": e.event.start,
						"isInterview": e.event.extendedProps.isInterview,
						"recruteur": e.event.extendedProps.recruteur,
						"title": e.event.title,
						"description": e.event.extendedProps.description,
						"start": e.event.start,
						"end": e.event.end,
						"backgroundColor": e.event.backgroundColor,
						"textColor": e.event.textColor,
						"borderColor": e.event.borderColor,
						"allDay": e.event.allDay

					}
					// console.log(donnees)
					let xhr = new XMLHttpRequest

					xhr.open("DELETE", url)
					xhr.send(JSON.stringify(donnees))

				})

				calendar.render()

			}
</script>
		<!-- Datetimepicker js-->
		<script src="{{ asset('js/jquery.min.js') }}"></script>

		<script src="{{ asset('js/moment-with-locales.min.js') }}"></script>
		<script src="{{ asset('js/bootstrap-datetimepicker.min.js') }}"></script>
		<script src="{{ asset('js/main.js') }}"></script>
		<script>
			function showDateEnd() {
				var checkBox = document.querySelector(".myCheck");
				var dateFinDiv = document.getElementById("dateFinDiv");
				if (checkBox.checked == true) {
				dateFinDiv.style.display = "none";
				} else {
				dateFinDiv.style.display = "block";
				document.getElementById("dateEnd").required = true;
			}
}
		</script>
	{% endblock %}


{% endblock %}
